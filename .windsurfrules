# [WorkSpace Rules]

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
React and TypeScript application - financial education and trading platform the enables users:

**Strategy Management**
   - Strategy creation and editing
   - Public/private strategy visibility
   - Performance metrics tracking

**Trade Management**
   - Multi-action trade support
   - Atomic updates
   - Server-side calculations

**Data Visualization**
   - Interactive charts
   - Performance metrics display
   - Market data visualization
   

# Coding Workflow
- When creating on a user-facing feature, first search to see if there’s a e2e test already written for it
- If not, create the test first and ask user to confirm the test is correct before proceeding, do NOT do any further work until the user explicitly confirms the test is correct
- Implement the feature and use `npx tsc --noEmit` to check and fix compilation errors
- Run the relevant test file via `npx playwright test tests/<test_file>` and iterate until the test passes
- Run `npx prettier --write .` to format the code before returning to user


## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure repository files: exported component, subcomponent, helpers, static content, types.


```
/trading-strategy-app
├── src/
│   ├── components/         # Reusable UI components
│   ├── pages/              # Feature-level components
│   ├── hooks/              # Custom React hooks
│   ├── services/           # API integrations
│   ├── utils/              # Helper functions
│   ├── types/              # TypeScript definitions
│   └── context/            # React context providers
└── public/                 # Static assets
```

## Tech Stack
Runtime Environment:
Node.js: >= 18.0.0
npm: >= 8.0.0

Build System:
Vite: 6.2.5

Core Framework:
React: 18.3.1
React Router DOM: 6.22.3

TypeScript:
TypeScript: TypeScript v5.5.3
TypeScript (App):ES2020
TypeScript (Node.js): ES2022

Styling:
Tailwind CSS: 3.4.17
PostCSS: 8.4.35
Autoprefixer: 10.4.18
tailwind-merge 2.2.1
tailwindcss-animate 1.0.7

State Management:
Zustand: 4.5.2

Animation:
Framer Motion: 11.18.2

Backend Integration:
Supabase: 2.39.7

Backend (Auth):
/auth-helpers-react: 0.3.1

Utility:
Class Variance Authority: 0.7.1

Tooling:
ESLint: 9.9.1
Prettier: 3.5.3
Playwright: 1.51.1


## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard).
- Favor named exports for components and utilities.


## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces


## Authentication
- Use supabase.auth.getUser() to get the user, use the client sub package for client components otherwise use the server package
- do not use @supabase/auth-helpers-nextjs


## Database
- Use supabase for database queries and schema
- Always use migrations to update the database schema, create them using the command `npx supabase migration new <migration-name>`
- After creating a migration file, run `npx supabase migration up` to apply the migration and run `npx supabase gen types typescript --local > src/types/database.types.ts` to generate the type file
- All database fields should use snake_case, the TS interface types should all have a name prefix "Db" e.g. DbReview


## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types


## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- When adding new shadcn component, document the installation command


## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully


## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance


## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling


## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks


### Commit Message Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable


## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements