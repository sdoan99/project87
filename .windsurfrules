# [WorkSpace Rules]

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
React and TypeScript - financial education and trading platform the enables users:

**Strategy Management**
   - Strategy creation and editing
   - Public/private strategy visibility
   - Performance metrics tracking

**Trade Management**
   - Multi-action trade support
   - Atomic updates
   - Server-side calculations
**Data Visualization**
   - Interactive charts
   - Performance metrics display
   - Market data visualization


## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure repository files as follows:

```
/trading-strategy-app
├── src/
│   ├── components/         # Reusable UI components
│   ├── pages/              # Feature-level components
│   ├── hooks/              # Custom React hooks
│   ├── services/           # API integrations
│   ├── utils/              # Helper functions
│   ├── types/              # TypeScript definitions
│   └── context/            # React context providers
└── public/                 # Static assets
```

## Tech Stack
Runtime Environment:
Node.js: >= 18.0.0
npm: >= 8.0.0

Build System:
Vite: 5.4.2

Core Framework:
React: 18.3.1
React Router DOM: 6.22.3

TypeScript:
TypeScript: TypeScript v5.5.3
TypeScript (App):ES2020
TypeScript (Node.js): ES2022

Styling:
Tailwind CSS: 3.4.17
PostCSS: 8.4.35
Autoprefixer: 10.4.18
tailwind-merge 2.2.1
tailwindcss-animate 1.0.7

State Management:
Zustand: 4.5.2

Animation:
Framer Motion: 11.18.2

Backend Integration:
Supabase: 2.39.7

Backend (Auth):
/auth-helpers-react: 0.3.1

Utility:
Class Variance Authority: 0.7.1

Tooling:
ESLint: 9.9.1

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## Chrome Extension Specific
- Use Manifest V3 standards
- Implement proper message passing between components:
  ```typescript
  interface MessagePayload {
    type: string;
    data: unknown;
  }
  ```
- Handle permissions properly in manifest.json
- Use chrome.storage.local for persistent data
- Implement proper error boundaries and fallbacks
- Use lib/storage for storage related logic
- For the async injected scripts in content/, 
  - they must not close over variables from the outer scope
  - they must not use imported functions from the outer scope
  - they must have wrapped error handling so the error message is returned to the caller

## State Management
- Use React Context for global state when needed
- Implement proper state persistence using chrome.storage (for extension)
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- Follow Material Design guidelines for Chrome extensions
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog