/*
# Money Printer Data Dictionary

## Overview
This document provides a comprehensive data dictionary for the Money Printer application's database schema.
The schema is designed to support trading strategy management, user profiles, and trade tracking.

## Table Structure

### 1. User Management Tables

#### user_profiles
Stores core user profile information and serves as the main user table.

Table: user_profiles  
- id (uuid, PK) - Unique identifier for the user, generated by `gen_random_uuid()` (Database)  
- email (text, NOT NULL) - User’s email address (User Input)  
- username (text, NOT NULL) - User’s chosen username (User Input)  
- created_at (timestamptz) - Record creation timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  
- updated_at (timestamptz) - Record update timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  

#### user_details
Stores additional user information and social media links.


Table: user_details  
- id (uuid, PK) - Unique identifier, generated by `gen_random_uuid()` (Database)  
- user_id (uuid, FK) - References `user_profiles.id`, defaults to `auth.uid()` (System Generated)  
- first_name (text) - User’s first name (User Input)  
- last_name (text) - User’s last name (User Input)  
- phone (text) - User’s phone number (User Input)  
- avatar_url (text) - URL to user’s avatar image (User Input)  
- is_online (boolean) - Online status, defaults to `false` (User Input)  
- twitter_handle (text) - User’s Twitter handle (User Input)  
- youtube_channel_link (text) - Link to YouTube channel (User Input)  
- youtube_username (text) - YouTube username (User Input)  
- facebook_profile (text) - Facebook profile URL (User Input)  
- instagram_profile (text) - Instagram profile URL (User Input)  
- website_url (text) - Personal website URL (User Input)  
- signature (text) - User’s custom signature (User Input)  
- show_social_networks (boolean) - Toggle to display social links, defaults to `true` (User Input)  
- created_at (timestamptz) - Record creation timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  
- updated_at (timestamptz) - Record update timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  

### 2. Strategy Management Tables

#### strategy_profile
Defines trading strategies and their characteristics.

Table: strategy_profile  
- id (uuid, PK) - Unique identifier, generated by `gen_random_uuid()` (Database)  
- user_id (uuid) - References `user_profiles.id`, defaults to `auth.uid()` (System Generated)  
- username (text) - Username of the creator (User Input)  
- name (text, NOT NULL) - Strategy name (User Input)  
- description (text) - Strategy description (User Input)  
- market_types (text) - Applicable market types (User Input)  
- timeframes (text) - Applicable timeframes (User Input)  
- categories (text) - Strategy categories (User Input)  
- public (text) - Visibility status (User Input)  
- created_at (timestamptz) - Record creation timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  
- updated_at (timestamptz) - Record update timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  

#### strategy_metrics
Tracks performance metrics for strategies.

Table: strategy_metrics  
- id (uuid, PK) - Unique identifier, generated by `gen_random_uuid()` (Database)  
- strategy_id (uuid, FK) - References `strategy_profile.id` (System Generated)  
- name (text, NOT NULL) - Metric name (User Input)  
- total_pnl (numeric) - Total profit and loss (Calculated in Database)  
- win_rate (numeric) - Percentage of winning trades (Calculated in Database)  
- avg_win (numeric) - Average win amount (Calculated in Database)  
- avg_loss (numeric) - Average loss amount (Calculated in Database)  
- profit_factor (numeric) - Profit factor ratio (Calculated in Database)  
- avg_pnl_per_day (numeric) - Average profit/loss per day (Calculated in Database)  
- 1H - ALL (NUMERIC(9,4)) - Various time-period performance metrics (Calculated in Database)  
- created_at (timestamptz) - Record creation timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  
- updated_at (timestamptz) - Record update timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  


### 3. Trade Management Tables

#### bet_data  
Main trade entry table and Individual trade execution records.

Table: bet_data  
- id (uuid, PK) - Unique identifier for the trade, generated by `gen_random_uuid()` (Database)  
- user_id (uuid) - References `user_profiles.id`, defaults to `auth.uid()` (Database)  
- strategy_id (uuid) - References `strategy_profile.id`, tracks strategy performance (System Generated)  
- bet_id (uuid) - Shared identifier across related actions, generated via NewTrade form (System Generated)  
- date (date) - Trade entry date, defaults to `CURRENT_TIMESTAMP` (User Input)  
- market (text) - Market type (e.g., STOCK, CRYPTO) (User Input)  
- sector (text) - Market sector (User Input)  
- symbol (text) - Trading symbol (User Input)  
- expiration (date) - Option/contract expiration date (User Input)  
- position (text) - Trade position type (Calculated in Database)  
- side (text) - Trade side (BUY/SELL) (Calculated in Database)  
- quantity (numeric) - Trade quantity (User Input)  
- price (numeric) - Execution price (User Input)  
- fee (numeric) - Transaction fee (User Input)  
- entry (numeric) - Entry price if opening (Calculated in Database)  
- exit (numeric) - Exit price if closing (Calculated in Database)  
- created_at (timestamptz) - Record creation timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  
- updated_at (timestamptz) - Record update timestamp, defaults to `CURRENT_TIMESTAMP` (Server)  

#### bet_data_metrics  
Tracks metrics for trade records.  

Table: bet_data_metrics  

-id (uuid, PK) - Unique identifier for the aggregated trade record, generated by gen_random_uuid() (Database)  
-strategy_id (uuid) - References strategy_profile, links to the associated strategy (System Generated)  
-bet_id (uuid) - References bet_data.bet_id, links to the grouped trade actions (System Generated)  
-date (date) - Date of the trade, defaults to CURRENT_TIMESTAMP (User Input)  
-symbol (text) - Trading symbol (e.g., stock ticker) (User Input)  
-status (text) - Trade status (e.g., open/win/loss) (Calculated)  
-position (text) - Position type (e.g., long/short) (Calculated)  
-qty (numeric) - Total quantity traded (Calculated)  
-entry (numeric) - Average entry price (Calculated)  
-exit (numeric) - Average exit price (Calculated)  
-qty_rem (numeric) - Remaining quantity (Calculated)  
-hold (interval) - Holding period (Calculated)  
-return (numeric) - Trade return (Calculated)  
-return_percent (NUMERIC(9, 4)) - Return percentage (Calculated)  
-entry_tot (numeric) - Total entry cost (Calculated)  
-exit_tot (numeric) - Total exit value (Calculated)  
-created_at (timestamptz) - Timestamp when the metrics were created, defaults to CURRENT_TIMESTAMP (Server)  
-updated_at (timestamptz) - Timestamp when the metrics were last updated, defaults to CURRENT_TIMESTAMP (Server)



## Business Rules

1. User Management
   - Usernames must be unique and at least 3 characters long
   - Email addresses must be unique
   - Social media handles and URLs are optional

2. Strategy Management
   - Each strategy must have a name and be associated with a user
   - Strategies can be public or private
   - Market types, timeframes, and categories use predefined values

3. Trade Management
   - All trades must be associated with a strategy and user
   - Parent trades can have multiple child executions
   - Trade metrics are automatically calculated and updated ON THE SERVER/DATABASE SIDE
   - Return percentages are calculated based on entry/exit prices

## Row Level Security (RLS)

1. User Data
   - Users can only view and modify their own profile data
   - Public profile information is readable by all users

2. Strategy Data
   - Users can only modify their own strategies
   - Public strategies are readable by all users
   - Private strategies are only visible to their creators and their followers or subscribers

3. Trade Data
   - Users can only view and modify their own trade data
   - Trade metrics are calculated with RLS in mind

## Indexes and Performance

Key indexes are maintained on:
- User identifiers (id, username, email)
- Strategy identifiers (id, name)
- Trade identifiers (bet_id, strategy_id)
- Timestamp columns for efficient sorting
*/